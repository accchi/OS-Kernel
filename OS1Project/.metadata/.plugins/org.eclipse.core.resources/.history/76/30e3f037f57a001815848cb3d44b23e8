/*
 * main.cpp
 *
 *  Created on: May 10, 2018
 *      Author: OS1
 */
#include <IOSTREAM.h>
#include "List.h"
#include "PCB.h"
#include "SrtdList.h"
#include "Thread.h"
#include "Global.h"
#include "Semaphor.h"

int userMain(int,char**);
int syncPrintf(const char *format, ...);

int main(int argc, char** argv){
	/*List list;
	                      LIST TEEEEEST
	PCB* p1=new PCB();
	PCB* p2=new PCB();
	PCB* p3=new PCB();
	PCB* p4=new PCB();
	PCB* p5=new PCB();
	PCB* p6=new PCB();
	PCB* p7=new PCB();
	PCB* p8=new PCB();
	PCB* p9=new PCB();
	/*list.takeByID(8);
	list.addToHead(p5);
	list.takeLast();
	list.takeLast();
	list.takeFirst();
	list.addToEnd(p5);
	list.takeFirst();
	list.takeLast();
	list.addToHead(p1);
	list.addToEnd(p2);
	list.addToHead(p3);
	list.addToEnd(p4);
	list.addToEnd(p5);
	list.addToHead(p6);
	list.addToEnd(p7);
	list.addToHead(p8);
	list.addToHead(p9);

	cout<<list.takeFirst()->id;
	cout<<list.takeLast()->id;
	for(int i=0;i<15;i++){
		PCB* p=list.takeByID(i*7%10);
		if(p!=0)
			cout<<p->id;
	}*/
	/*SrtdList list;     TEEEEEEEEEEEEESTT FOR SORTED LIST
	list.insert(p1,5);
	list.write();
	list.insert(p2,3);
	list.write();
	list.insert(p3,8);
	list.write();
	list.insert(p4,3);
	list.write();
	list.insert(p5,3);
	list.write();
	list.insert(p6,5);
	list.write();
	list.insert(p7,2);
	list.write();
	list.insert(p8,6);
	list.write();
	list.insert(p9,10);
	list.write();
	for(int i=0;i<12;i++){
		list.update();
		list.write();
	}*/
	Global::init();
	/*syncPrintf("Test starts.\n");
		Thread t1(64,1), t2(4096,32), t3(1024,16), t4(4096,0);
		t1.start();
		t2.start();
		t3.start();
		t4.start();
		t1.waitToComplete();
		t2.waitToComplete();
		t3.waitToComplete();
		t4.waitToComplete();
	syncPrintf("Test ends.\n");*/
	//Thread * t1=new Thread(2048,0);
	//Thread * t2=new Thread(2048,4);
	//t1->start();
	//t2->start();
	//t1->waitToComplete();
	//t2->waitToComplete();
	//t1->waitToComplete();
	//t2->waitToComplete();
	//t1->waitToComplete();
	//Thread::sleep(20);
	//dispatch();
	//t1->start();
	//Thread::sleep(1);
	//t1->waitToComplete();
	//Thread::sleep(20); // NE RADI KONJINO
	//userMain(argc,argv);
	Thread t1=new Thread(1024,2);
	//Thread t=new Thread();

	//Thread::sleep(10);
	//Semaphore s(2);
	//s.wait(1);
	//syncPrintf("2");
	//s.signal();
	Global::restore();
	return 0;
}



